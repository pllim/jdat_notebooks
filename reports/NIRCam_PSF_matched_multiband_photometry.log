Traceback (most recent call last):
  File "/usr/share/miniconda/lib/python3.9/site-packages/jupyter_cache/executors/utils.py", line 51, in single_nb_execution
    executenb(
  File "/usr/share/miniconda/lib/python3.9/site-packages/nbclient/client.py", line 1204, in execute
    return NotebookClient(nb=nb, resources=resources, km=km, **kwargs).execute()
  File "/usr/share/miniconda/lib/python3.9/site-packages/nbclient/util.py", line 84, in wrapped
    return just_run(coro(*args, **kwargs))
  File "/usr/share/miniconda/lib/python3.9/site-packages/nbclient/util.py", line 62, in just_run
    return loop.run_until_complete(coro)
  File "/usr/share/miniconda/lib/python3.9/asyncio/base_events.py", line 647, in run_until_complete
    return future.result()
  File "/usr/share/miniconda/lib/python3.9/site-packages/nbclient/client.py", line 663, in async_execute
    await self.async_execute_cell(
  File "/usr/share/miniconda/lib/python3.9/site-packages/nbclient/client.py", line 965, in async_execute_cell
    await self._check_raise_for_error(cell, cell_index, exec_reply)
  File "/usr/share/miniconda/lib/python3.9/site-packages/nbclient/client.py", line 862, in _check_raise_for_error
    raise CellExecutionError.from_cell_and_msg(cell, exec_reply_content)
nbclient.exceptions.CellExecutionError: An error occurred while executing the following cell:
------------------
PSF_inputs = {}
PSF_images = {}

detector_pixel_scales = {'SW': 0.031, 'LW': 0.063}

PSF_url = os.path.join(input_file_url, 'NIRCam_PSFs')

for i, filt in enumerate(filters):
    lam = wavelengths[i]
    if lam < 2.4 * u.um:
        channel = 'SW'  # Short Wavelength Channel < 2.4 microns
    else:
        channel = 'LW'  # Long Wavelength Channel > 2.4 microns

    # Load PSF
    PSF_file = 'PSF_%scen_G5V_fov299px_ISIM41.fits' % filt
    # PSF_file = os.path.join('NIRCam_PSFs_' + channel, PSF_file)
    PSF_file = os.path.join(PSF_url, PSF_file)

    print(PSF_file)
    PSF_hdu = fits.open(PSF_file)
    PSF_inputs[filt] = data = PSF_hdu[1].data  # extension [1] is at pixel scale (not oversampled)
    ny, nx = data.shape
    
    # Resize from detector pixel scale to image pixel scale (here 0.03" / pix)
    detector_pixel_scale = detector_pixel_scales[channel]
    ny_resize = ny * detector_pixel_scale / image_pixel_scale  # Assume square PSF (ny = nx)
    ny_resize = np.round(ny_resize)
    ny_resize = np.int((ny_resize // 2) * 2 + 1)  # Make it an odd number of pixels to ensure PSF is centered
    PSF_pixel_scale = ny_resize / ny * image_pixel_scale    
    PSF_image = resize_psf(PSF_inputs[filt], PSF_pixel_scale, image_pixel_scale)  # Resize PSF here
    r = (ny_resize - ny) // 2
    PSF_images[filt] = PSF_image[r:-r, r:-r]  # Trim to same size as input PSFs
    # Note PSF is no longer normalized but will be later in convolution step
    # print(filt, ny, ny_resize, PSF_image.shape, PSF_images[filt].shape, PSF_pixel_scale)
------------------

[0;31m---------------------------------------------------------------------------[0m
[0;31mAttributeError[0m                            Traceback (most recent call last)
Cell [0;32mIn[23], line 29[0m
[1;32m     27[0m ny_resize [38;5;241m=[39m ny [38;5;241m*[39m detector_pixel_scale [38;5;241m/[39m image_pixel_scale  [38;5;66;03m# Assume square PSF (ny = nx)[39;00m
[1;32m     28[0m ny_resize [38;5;241m=[39m np[38;5;241m.[39mround(ny_resize)
[0;32m---> 29[0m ny_resize [38;5;241m=[39m [43mnp[49m[38;5;241;43m.[39;49m[43mint[49m((ny_resize [38;5;241m/[39m[38;5;241m/[39m [38;5;241m2[39m) [38;5;241m*[39m [38;5;241m2[39m [38;5;241m+[39m [38;5;241m1[39m)  [38;5;66;03m# Make it an odd number of pixels to ensure PSF is centered[39;00m
[1;32m     30[0m PSF_pixel_scale [38;5;241m=[39m ny_resize [38;5;241m/[39m ny [38;5;241m*[39m image_pixel_scale    
[1;32m     31[0m PSF_image [38;5;241m=[39m resize_psf(PSF_inputs[filt], PSF_pixel_scale, image_pixel_scale)  [38;5;66;03m# Resize PSF here[39;00m

File [0;32m/usr/share/miniconda/lib/python3.9/site-packages/numpy/__init__.py:284[0m, in [0;36m__getattr__[0;34m(attr)[0m
[1;32m    281[0m     [38;5;28;01mfrom[39;00m [38;5;21;01m.[39;00m[38;5;21;01mtesting[39;00m [38;5;28;01mimport[39;00m Tester
[1;32m    282[0m     [38;5;28;01mreturn[39;00m Tester
[0;32m--> 284[0m [38;5;28;01mraise[39;00m [38;5;167;01mAttributeError[39;00m([38;5;124m"[39m[38;5;124mmodule [39m[38;5;132;01m{!r}[39;00m[38;5;124m has no attribute [39m[38;5;124m"[39m
[1;32m    285[0m                      [38;5;124m"[39m[38;5;132;01m{!r}[39;00m[38;5;124m"[39m[38;5;241m.[39mformat([38;5;18m__name__[39m, attr))

[0;31mAttributeError[0m: module 'numpy' has no attribute 'int'
AttributeError: module 'numpy' has no attribute 'int'

