Traceback (most recent call last):
  File "/usr/share/miniconda/lib/python3.9/site-packages/jupyter_cache/executors/utils.py", line 51, in single_nb_execution
    executenb(
  File "/usr/share/miniconda/lib/python3.9/site-packages/nbclient/client.py", line 1204, in execute
    return NotebookClient(nb=nb, resources=resources, km=km, **kwargs).execute()
  File "/usr/share/miniconda/lib/python3.9/site-packages/nbclient/util.py", line 84, in wrapped
    return just_run(coro(*args, **kwargs))
  File "/usr/share/miniconda/lib/python3.9/site-packages/nbclient/util.py", line 62, in just_run
    return loop.run_until_complete(coro)
  File "/usr/share/miniconda/lib/python3.9/asyncio/base_events.py", line 647, in run_until_complete
    return future.result()
  File "/usr/share/miniconda/lib/python3.9/site-packages/nbclient/client.py", line 663, in async_execute
    await self.async_execute_cell(
  File "/usr/share/miniconda/lib/python3.9/site-packages/nbclient/client.py", line 965, in async_execute_cell
    await self._check_raise_for_error(cell, cell_index, exec_reply)
  File "/usr/share/miniconda/lib/python3.9/site-packages/nbclient/client.py", line 862, in _check_raise_for_error
    raise CellExecutionError.from_cell_and_msg(cell, exec_reply_content)
nbclient.exceptions.CellExecutionError: An error occurred while executing the following cell:
------------------
import aplpy
from aplpy import __version__ as aplpy_version
print("Aplpy: {}".format(aplpy_version))

import astrodendro
from astrodendro import __version__ as astrodendro_version
print("Astrodendro: {}".format(astrodendro_version))

import astropy
from astropy import __version__ as astropy_version
print("Astropy: {}".format(astropy_version))

import jwst
from jwst import __version__ as jwst_version
print("JWST: {}".format(jwst_version))

import matplotlib
from matplotlib import __version__ as matplotlib_version
print("Matplotlib: {}".format(matplotlib_version))

import numpy
from numpy import __version__ as numpy_version
print("Numpy: {}".format(numpy_version))

import pandas
from pandas import __version__ as pandas_version
print("Pandas: {}".format(pandas_version))

import photutils
from photutils import __version__ as photutils_version
print("Photutils: {}".format(photutils_version))

import scipy
from scipy import __version__ as scipy_version
print("Scipy: {}".format(scipy_version))

import specutils
from specutils import __version__ as specutils_version
print("Specutils: {}".format(specutils_version))

import spectral_cube
from spectral_cube import __version__ as spectral_cube_version
print("SpectralCube: {}".format(spectral_cube_version))
------------------

[0;31m---------------------------------------------------------------------------[0m
[0;31mAttributeError[0m                            Traceback (most recent call last)
Cell [0;32mIn[3], line 5[0m
[1;32m      2[0m [38;5;28;01mfrom[39;00m [38;5;21;01maplpy[39;00m [38;5;28;01mimport[39;00m __version__ [38;5;28;01mas[39;00m aplpy_version
[1;32m      3[0m [38;5;28mprint[39m([38;5;124m"[39m[38;5;124mAplpy: [39m[38;5;132;01m{}[39;00m[38;5;124m"[39m[38;5;241m.[39mformat(aplpy_version))
[0;32m----> 5[0m [38;5;28;01mimport[39;00m [38;5;21;01mastrodendro[39;00m
[1;32m      6[0m [38;5;28;01mfrom[39;00m [38;5;21;01mastrodendro[39;00m [38;5;28;01mimport[39;00m __version__ [38;5;28;01mas[39;00m astrodendro_version
[1;32m      7[0m [38;5;28mprint[39m([38;5;124m"[39m[38;5;124mAstrodendro: [39m[38;5;132;01m{}[39;00m[38;5;124m"[39m[38;5;241m.[39mformat(astrodendro_version))

File [0;32m/usr/share/miniconda/lib/python3.9/site-packages/astrodendro/__init__.py:3[0m
[1;32m      1[0m [38;5;66;03m# Licensed under an MIT open source license - see LICENSE[39;00m
[0;32m----> 3[0m [38;5;28;01mfrom[39;00m [38;5;21;01m.[39;00m[38;5;21;01mdendrogram[39;00m [38;5;28;01mimport[39;00m Dendrogram, periodic_neighbours
[1;32m      4[0m [38;5;28;01mfrom[39;00m [38;5;21;01m.[39;00m[38;5;21;01mstructure[39;00m [38;5;28;01mimport[39;00m Structure
[1;32m      5[0m [38;5;28;01mfrom[39;00m [38;5;21;01m.[39;00m[38;5;21;01manalysis[39;00m [38;5;28;01mimport[39;00m ppv_catalog, pp_catalog

File [0;32m/usr/share/miniconda/lib/python3.9/site-packages/astrodendro/dendrogram.py:23[0m
[1;32m     20[0m     [38;5;28;01mreturn[39;00m [38;5;28msorted[39m(d, key[38;5;241m=[39m[38;5;28;01mlambda[39;00m s: s[38;5;241m.[39midx)
[1;32m     22[0m [38;5;66;03m# utility dict to offsets of adjacent pixel list[39;00m
[0;32m---> 23[0m _offsets [38;5;241m=[39m [38;5;28;43mdict[39;49m[43m([49m[43m([49m[43mndim[49m[43m,[49m[43m [49m[43mnp[49m[38;5;241;43m.[39;49m[43mconcatenate[49m[43m([49m[43m([49m
[1;32m     24[0m [43m                [49m[43mnp[49m[38;5;241;43m.[39;49m[43midentity[49m[43m([49m[43mndim[49m[43m)[49m[43m,[49m
[1;32m     25[0m [43m                [49m[43mnp[49m[38;5;241;43m.[39;49m[43midentity[49m[43m([49m[43mndim[49m[43m)[49m[43m [49m[38;5;241;43m*[39;49m[43m [49m[38;5;241;43m-[39;49m[38;5;241;43m1[39;49m[43m)[49m[43m)[49m[38;5;241;43m.[39;49m[43mastype[49m[43m([49m[43mnp[49m[38;5;241;43m.[39;49m[43mint[49m[43m)[49m[43m)[49m
[1;32m     26[0m [43m                [49m[38;5;28;43;01mfor[39;49;00m[43m [49m[43mndim[49m[43m [49m[38;5;129;43;01min[39;49;00m[43m [49m[38;5;28;43mrange[39;49m[43m([49m[38;5;241;43m1[39;49m[43m,[49m[43m [49m[38;5;241;43m8[39;49m[43m)[49m[43m)[49m
[1;32m     28[0m [38;5;66;03m# the formula above generalizes this special case[39;00m
[1;32m     29[0m [38;5;66;03m#_offsets[3] = np.array([(0, 0, -1), (0, 0, 1),[39;00m
[1;32m     30[0m [38;5;66;03m#                        (0, -1, 0), (0, 1, 0),[39;00m
[1;32m     31[0m [38;5;66;03m#                        (-1, 0, 0), (1, 0, 0)])[39;00m
[1;32m     34[0m [38;5;28;01mclass[39;00m [38;5;21;01mDendrogram[39;00m([38;5;28mobject[39m):

File [0;32m/usr/share/miniconda/lib/python3.9/site-packages/astrodendro/dendrogram.py:25[0m, in [0;36m<genexpr>[0;34m(.0)[0m
[1;32m     20[0m     [38;5;28;01mreturn[39;00m [38;5;28msorted[39m(d, key[38;5;241m=[39m[38;5;28;01mlambda[39;00m s: s[38;5;241m.[39midx)
[1;32m     22[0m [38;5;66;03m# utility dict to offsets of adjacent pixel list[39;00m
[1;32m     23[0m _offsets [38;5;241m=[39m [38;5;28mdict[39m((ndim, np[38;5;241m.[39mconcatenate((
[1;32m     24[0m                 np[38;5;241m.[39midentity(ndim),
[0;32m---> 25[0m                 np[38;5;241m.[39midentity(ndim) [38;5;241m*[39m [38;5;241m-[39m[38;5;241m1[39m))[38;5;241m.[39mastype([43mnp[49m[38;5;241;43m.[39;49m[43mint[49m))
[1;32m     26[0m                 [38;5;28;01mfor[39;00m ndim [38;5;129;01min[39;00m [38;5;28mrange[39m([38;5;241m1[39m, [38;5;241m8[39m))
[1;32m     28[0m [38;5;66;03m# the formula above generalizes this special case[39;00m
[1;32m     29[0m [38;5;66;03m#_offsets[3] = np.array([(0, 0, -1), (0, 0, 1),[39;00m
[1;32m     30[0m [38;5;66;03m#                        (0, -1, 0), (0, 1, 0),[39;00m
[1;32m     31[0m [38;5;66;03m#                        (-1, 0, 0), (1, 0, 0)])[39;00m
[1;32m     34[0m [38;5;28;01mclass[39;00m [38;5;21;01mDendrogram[39;00m([38;5;28mobject[39m):

File [0;32m/usr/share/miniconda/lib/python3.9/site-packages/numpy/__init__.py:284[0m, in [0;36m__getattr__[0;34m(attr)[0m
[1;32m    281[0m     [38;5;28;01mfrom[39;00m [38;5;21;01m.[39;00m[38;5;21;01mtesting[39;00m [38;5;28;01mimport[39;00m Tester
[1;32m    282[0m     [38;5;28;01mreturn[39;00m Tester
[0;32m--> 284[0m [38;5;28;01mraise[39;00m [38;5;167;01mAttributeError[39;00m([38;5;124m"[39m[38;5;124mmodule [39m[38;5;132;01m{!r}[39;00m[38;5;124m has no attribute [39m[38;5;124m"[39m
[1;32m    285[0m                      [38;5;124m"[39m[38;5;132;01m{!r}[39;00m[38;5;124m"[39m[38;5;241m.[39mformat([38;5;18m__name__[39m, attr))

[0;31mAttributeError[0m: module 'numpy' has no attribute 'int'
AttributeError: module 'numpy' has no attribute 'int'

